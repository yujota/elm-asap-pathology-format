module Example exposing (main)

import AsapPathology exposing (AnnotationGroup, AsapPathology)
import AsapPathology.Annotation as Annotation
import AsapPathology.AnnotationGroup as AnnotationGroup
import AsapPathology.Decode as AD
import AsapPathology.Encode as AE
import Browser
import Color
import File exposing (File)
import File.Download as Download
import File.Select as Select
import Html exposing (Html)
import Html.Attributes as Attr
import Html.Events exposing (onClick)
import Task


main =
    Browser.element { init = init, update = update, view = view, subscriptions = always Sub.none }



-- Model


init : () -> ( Model, Cmd Msg )
init _ =
    ( { status = FileNotSelected, fileName = Nothing }, Cmd.none )


type alias Model =
    { status : Status, fileName : Maybe String }


type Status
    = FileNotSelected
    | Parsed AsapPathology
    | ParseError String



-- update


type Msg
    = UploadRequested
    | FileSelected File
    | FileLoaded String
    | RequestDownload


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        UploadRequested ->
            ( model, Select.file [ "application/xml", "text/xml" ] FileSelected )

        FileSelected file ->
            ( { model | fileName = File.name file |> Just }, Task.perform FileLoaded (File.toString file) )

        FileLoaded str ->
            case AD.decodeString str of
                Ok data ->
                    ( { model | status = Debug.log "data" data |> Parsed }, Cmd.none )

                Err error ->
                    ( { model | status = Debug.log "error" error |> ParseError }, Cmd.none )

        RequestDownload ->
            case ( model.status, model.fileName ) of
                ( Parsed data, Just name ) ->
                    let
                        newName =
                            String.slice 0 -4 name ++ ".min.xml"
                    in
                    ( model, Download.string newName "text/xml" <| AE.format data )

                _ ->
                    ( model, Cmd.none )



-- View


view : Model -> Html Msg
view model =
    Html.div [] [ navBar, section model ]


navBar =
    Html.nav [ Attr.class "navbar is-link" ]
        [ Html.div [ Attr.class "navbar-brand" ]
            [ Html.a [ Attr.class "navbar-item" ] [ Html.text "Example of elm-asap-pathology-format" ]
            ]
        ]


section : Model -> Html Msg
section model =
    Html.section [ Attr.class "section" ] [ Html.div [ Attr.class "container" ] [ description, tiles model ] ]


description : Html Msg
description =
    Html.div []
        [ Html.h1 [ Attr.class "title" ] [ Html.text "What is this?" ]
        , Html.p []
            [ Html.text
                "This website is an example of"
            , Html.a [ Attr.href "https://github.com/yujota/elm-asap-pathology-format" ]
                [ Html.text "yujota/elm-asap-pathology-format" ]
            , Html.text
                "."
            ]
        , Html.p []
            [ Html.text
                "Upload XML file generated by"
            , Html.a [ Attr.href "https://github.com/computationalpathologygroup/ASAP" ]
                [ Html.text "Automated Slide Analysis Platform" ]
            , Html.text
                ", and this site will display its content."
            ]
        ]


tiles : Model -> Html Msg
tiles model =
    Html.div [ Attr.class "tile is-ancestor", Attr.style "margin-top" "1em" ]
        [ Html.div [ Attr.class "tile is-parent is-vertical" ]
            [ uploadFile model
            , errorDisplay model
            , content model
            , downloadAs model
            ]
        ]


uploadFile : Model -> Html Msg
uploadFile model =
    Html.div [ Attr.class "tile is-child box" ]
        [ Html.p [ Attr.class "title" ] [ Html.text "File" ]
        , Html.div [ Attr.class "field has-addons" ]
            [ Html.p [ Attr.class "control" ]
                [ Html.a [ Attr.class "button is-light", onClick UploadRequested ]
                    [ Html.span [ Attr.class "file-icon" ] [ Html.i [ Attr.class "fas fa-upload" ] [] ]
                    , Html.span [] [ Html.text "Choose a ASAP XML fileâ€¦" ]
                    ]
                ]
            , Html.p
                [ Attr.class "control is-expanded"
                ]
                [ Html.a
                    [ Attr.class "button is-fullwidth", Attr.disabled True ]
                    [ Html.text <| Maybe.withDefault "Not selected" model.fileName ]
                ]
            ]
        ]


errorDisplay : Model -> Html msg
errorDisplay model =
    case model.status of
        ParseError errorMessage ->
            Html.div [ Attr.class "tile is-child box  notification is-danger" ]
                [ Html.p [ Attr.class "title" ] [ Html.text "Error: Invalid XML file" ]
                , Html.p [] [ Html.text errorMessage ]
                ]

        _ ->
            Html.div [] []


content : Model -> Html Msg
content model =
    let
        ant a =
            { name = Annotation.name a
            , aType = Annotation.typeAsString a
            , partOfGroup = Annotation.partOfGroup a
            , color = Annotation.color a |> Color.toCssString
            }

        grp : AnnotationGroup -> { name : String, partOfGroup : String, color : String }
        grp g =
            { name = AnnotationGroup.name g
            , partOfGroup = AnnotationGroup.partOfGroup g
            , color = AnnotationGroup.color g |> Color.toCssString
            }
    in
    case model.status of
        Parsed data ->
            Html.div [ Attr.class "tile is-child box" ]
                [ Html.p [ Attr.class "title" ] [ Html.text "Content" ]
                , AsapPathology.annotations data |> List.map ant |> annotationTable
                , AsapPathology.annotationGroups data |> List.map grp |> annotationGroupTable
                ]

        _ ->
            Html.div [] []


annotationTable : List { name : String, aType : String, partOfGroup : String, color : String } -> Html msg
annotationTable tableData =
    let
        header =
            [ "Name", "Type", "Part Of Group", "Color" ]
                |> List.map (\n -> Html.th [] [ Html.text n ])

        row r =
            Html.tr []
                [ Html.td [] [ Html.text r.name ]
                , Html.td [] [ Html.text r.aType ]
                , Html.td [] [ Html.text r.partOfGroup ]
                , Html.td [] [ Html.text r.color ]
                ]
    in
    Html.div []
        [ Html.p [] [ Html.strong [] [ Html.text "Annotations" ] ]
        , Html.table [ Attr.class "table" ]
            [ Html.thead [] [ Html.tr [] header ]
            , Html.tfoot [] [ Html.tr [] header ]
            , Html.tbody [] (List.map row tableData)
            ]
        ]


annotationGroupTable : List { name : String, partOfGroup : String, color : String } -> Html msg
annotationGroupTable tableData =
    let
        header =
            [ "Name", "Part Of Group", "Color" ]
                |> List.map (\n -> Html.th [] [ Html.text n ])

        row r =
            Html.tr []
                [ Html.td [] [ Html.text r.name ]
                , Html.td [] [ Html.text r.partOfGroup ]
                , Html.td [] [ Html.text r.color ]
                ]
    in
    Html.div [ Attr.style "margin-top" "1em" ]
        [ Html.p [] [ Html.strong [] [ Html.text "Annotation Groups" ] ]
        , Html.table [ Attr.class "table" ]
            [ Html.thead [] [ Html.tr [] header ]
            , Html.tfoot [] [ Html.tr [] header ]
            , Html.tbody [] (List.map row tableData)
            ]
        ]


downloadAs : Model -> Html Msg
downloadAs model =
    case model.status of
        Parsed _ ->
            Html.div [ Attr.class "tile is-child box" ]
                [ Html.p [ Attr.class "title" ] [ Html.text "Download as" ]
                , Html.button [ Attr.class "button is-fullwidth is-link", onClick RequestDownload ]
                    [ Html.text "Minified XML file" ]
                ]

        _ ->
            Html.div [] []
